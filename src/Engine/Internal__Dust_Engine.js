// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var FsExtra = require("fs-extra");
var FastGlob = require("fast-glob");
var Caml_array = require("rescript/lib/js/caml_array.js");
var RecursiveCopy = require("recursive-copy");
var Internal__Dust_Utils$Dust = require("../Utils/Internal__Dust_Utils.js");
var Internal__Dust_Config$Dust = require("./Internal__Dust_Config.js");
var Internal__Dust_Markdown$Dust = require("./Internal__Dust_Markdown.js");

var globalMetadata = [];

var pagesPath = Path.join(Internal__Dust_Config$Dust.getFolderBase(undefined), "pages");

var pagePattern = Path.join(pagesPath, "**", "*.js");

function cleanOutputFolder(param) {
  return FsExtra.emptyDir(Internal__Dust_Config$Dust.getFolderOutput(undefined));
}

function generateHtml(htmlContent, $$location) {
  return FsExtra.outputFile($$location, htmlContent, {
              encoding: "utf-8"
            });
}

function parseCollection(meta, output, filename, props) {
  var $$process = (function (meta, output, filename, props) {
    const decache = require(`decache`)
    let res = require(`${meta.layout}`)
    
    decache(`${meta.layout}`)
    res = require(`${meta.layout}`)
    
    const status = res.main ? true : false
    const filepath = Path.join(output, meta.name, Path.basename(filename, `.md`), `index.html`)
    
    if(status) {
      return { status, filename, filepath, content: res.main(props)}
    } else {
      return { status, filename, filepath, content: ``}
    }
  });
  return $$process(meta, output, filename, props);
}

function parsePages(metadata, path, output) {
  var $$process = (function (meta, filepath, output) {
    const decache = require(`decache`)
    let res = require(filepath)
    
    decache(filepath)
    res = require(filepath)

    const status = res.main ? true : false
    
    if(status) {
      return { status, path: output, content: res.main(meta) }
    } else {
      return { status, path: output, content: `` }
    }
  });
  $$process(metadata, path, output);
  return $$process(metadata, path, output);
}

function renderCollections(param) {
  var collectionMetadata = function (param) {
    return Object.entries(Internal__Dust_Config$Dust.collections(undefined)).map(function (collection) {
                return {
                        name: Caml_array.get(collection, 0),
                        layout: Path.normalize(Path.join(Internal__Dust_Config$Dust.getFolderBase(undefined), "layouts", Caml_array.get(collection, 1).layout + ".js")),
                        source: Path.normalize(Path.join(Internal__Dust_Config$Dust.rootPath, Caml_array.get(collection, 1).source)),
                        pattern: Path.normalize(Path.join(Internal__Dust_Config$Dust.rootPath, Caml_array.get(collection, 1).source, "*.md"))
                      };
              });
  };
  var transformMeta = (function(metada, page, md, matter) {
        const newMatter = {...matter, content: md}
        const url = Path.join(`/`, metadata.name, Path.basename(page, `.md`))
        return {
          ...metadata,
          ...newMatter,
          url,
          page
        }
      });
  return Promise.all(collectionMetadata(undefined).map(function (metadata) {
                  globalMetadata.splice(0, globalMetadata.length);
                  return FastGlob([metadata.pattern]).then(function (pages) {
                                    return Promise.resolve(pages.map(function (page) {
                                                    return Fs.promises.readFile(page, "utf-8").then(function (raw) {
                                                                var matter = Internal__Dust_Markdown$Dust.mdToMatter(raw);
                                                                var html = Internal__Dust_Markdown$Dust.mdToHtml(matter.content);
                                                                var props = transformMeta(metadata, page, html, matter);
                                                                globalMetadata.push(props);
                                                                return Promise.resolve(parseCollection(metadata, Internal__Dust_Config$Dust.getFolderOutput(undefined), page, props));
                                                              });
                                                  }));
                                  }).then(function (eachFile) {
                                  return Promise.all(eachFile);
                                }).then(function (collections) {
                                return Promise.resolve(Internal__Dust_Utils$Dust.flatten([collections]));
                              }).then(function (collections) {
                              return Promise.all(collections.map(function (collection) {
                                              return generateHtml(collection.content, collection.path);
                                            }));
                            });
                }));
}

var sortGlobalCollectionMeta = (function(metadata) {
    let obj = {};
    metadata.forEach(data => {
      if(obj.hasOwnProperty(data.name)) {
        obj[`${data.name}`] = [{...obj[`${data.name}`]}, data]
      } else {
        obj = { ...obj, [data.name]: data }
      }
    })
    return obj
  });

function copyPublic(param) {
  var publicPath = Path.join(Internal__Dust_Config$Dust.getFolderBase(undefined), "public");
  if (Fs.existsSync(publicPath)) {
    return RecursiveCopy(publicPath, Path.join(Internal__Dust_Config$Dust.rootPath, "dist"));
  } else {
    return Promise.resolve(undefined);
  }
}

function renderPage(pagePath, metadata) {
  var pageFilename = Path.basename(pagePath, ".js");
  var specialPage;
  switch (pageFilename) {
    case "404" :
    case "500" :
    case "index" :
        specialPage = true;
        break;
    default:
      specialPage = false;
  }
  var targetPath = pagePath.replace(pageFilename, specialPage ? pageFilename : Path.join(pageFilename, "index")).replace(".js", ".html").replace(Path.join(Internal__Dust_Config$Dust.getFolderBase(undefined), "pages"), Internal__Dust_Config$Dust.getFolderOutput(undefined));
  var pages = parsePages(sortGlobalCollectionMeta(metadata), pagePath, targetPath);
  if (pages.status === true) {
    return generateHtml(pages.content, pages.path);
  } else {
    return Promise.resolve(undefined);
  }
}

function run(param) {
  return FastGlob([pagePattern]).then(function (paths) {
              if (Internal__Dust_Config$Dust.isConfigExist) {
                return Promise.all([
                            FsExtra.ensureDir(Internal__Dust_Config$Dust.getFolderOutput(undefined)).then(function (param) {
                                  return copyPublic(undefined);
                                }),
                            renderCollections(undefined).then(function (param) {
                                  return renderPage(Caml_array.get(paths, 0), globalMetadata);
                                })
                          ]);
              } else {
                return Promise.all([
                            FsExtra.ensureDir(Internal__Dust_Config$Dust.getFolderOutput(undefined)).then(function (param) {
                                  return copyPublic(undefined);
                                }),
                            renderPage(Caml_array.get(paths, 0), globalMetadata)
                          ]);
              }
            });
}

function update(path) {
  var replacePathAndRemove = function (origin) {
    return FsExtra.remove(origin.replace("src", "dist"));
  };
  var replaceFile = function (origin, target) {
    if (!origin.includes(target)) {
      return ;
    }
    var newPath = origin.replace("src", "dist");
    FsExtra.remove(newPath).then(function (param) {
          return FsExtra.copy(path, newPath);
        });
    
  };
  replaceFile(path, "public");
  var filename = Path.basename(path);
  var dataPagesTuple_0 = filename.includes(".md");
  var dataPagesTuple_1 = filename.includes(".ml");
  var dataPagesTuple_2 = path.includes(pagesPath);
  if (dataPagesTuple_0) {
    if (dataPagesTuple_1 || dataPagesTuple_2) {
      console.log("watching another ???");
    } else {
      replacePathAndRemove(path).then(function (param) {
            return renderCollections(undefined);
          });
    }
  } else if (dataPagesTuple_1) {
    if (dataPagesTuple_2) {
      replacePathAndRemove(path).then(function (param) {
              return renderCollections(undefined);
            }).then(function (param) {
            return renderPage(path.replace(".ml", ".js"), globalMetadata);
          });
    } else {
      replacePathAndRemove(path).then(function (param) {
              return renderCollections(undefined);
            }).then(function (param) {
            return renderPage(path.replace(".ml", ".js"), globalMetadata);
          });
    }
  } else {
    console.log("watching another ???");
  }
  
}

var Config;

var Markdown;

var Utils;

exports.Config = Config;
exports.Markdown = Markdown;
exports.Utils = Utils;
exports.globalMetadata = globalMetadata;
exports.pagesPath = pagesPath;
exports.pagePattern = pagePattern;
exports.cleanOutputFolder = cleanOutputFolder;
exports.generateHtml = generateHtml;
exports.parseCollection = parseCollection;
exports.parsePages = parsePages;
exports.renderCollections = renderCollections;
exports.sortGlobalCollectionMeta = sortGlobalCollectionMeta;
exports.copyPublic = copyPublic;
exports.renderPage = renderPage;
exports.run = run;
exports.update = update;
/* pagesPath Not a pure module */
