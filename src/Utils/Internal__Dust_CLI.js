// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("@ryyppy/rescript-promise/src/Promise.js");
var Process = require("process");
var Chokidar = require("chokidar");
var Caml_array = require("rescript/lib/js/caml_array.js");
var LiveServer = require("live-server");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Internal__Dust_Config$Dust = require("../Engine/Internal__Dust_Config.js");
var Internal__Dust_Engine$Dust = require("../Engine/Internal__Dust_Engine.js");

var outputPath = Internal__Dust_Config$Dust.getFolderOutput(undefined);

var startPath = Internal__Dust_Config$Dust.getFolderBase(undefined);

function initialScript(param) {
  return Internal__Dust_Engine$Dust.cleanOutputFolder(undefined).then(function (param) {
              return Internal__Dust_Engine$Dust.run(undefined);
            });
}

function serverRun(param) {
  return Chokidar.watch(startPath, {
                    ignored: "**/src/**/*.js",
                    ignoreInitial: false
                  }).on("all", (function (param) {
                    ((Object.keys(require.cache).forEach(function(id) {
        const path = require(`path`)
        if(id.includes(`/home/fahmiirsyadk/Developments/dust/dust`) 
          || id.includes(`/home/fahmiirsyadk/Developments/dust/src`) 
          || id.includes(path.resolve(`./src/`))) 
        {
          delete require.cache[id]
        }
      })));
                    
                  })).on("add", (function (path) {
                  console.log("adding: " + path);
                  initialScript(undefined);
                  
                })).on("change", (function (path) {
                console.log("changing: " + path);
                return Internal__Dust_Engine$Dust.update(path);
              }));
}

function watcher(param) {
  LiveServer.start({
        root: outputPath,
        logLevel: 0
      });
  console.log("Ready for changes");
  return serverRun(undefined);
}

function exec(param) {
  var command;
  try {
    command = Caml_array.get(Process.argv, 2);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Invalid_argument") {
      command = "";
    } else {
      throw exn;
    }
  }
  switch (command) {
    case "w" :
    case "watch" :
        break;
    default:
      initialScript(undefined);
      return ;
  }
  $$Promise.$$catch(initialScript(undefined).then(function (param) {
            watcher(undefined);
            return Promise.resolve(undefined);
          }), (function (err) {
          return Promise.resolve((console.log(err), undefined));
        }));
  
}

var Config;

exports.Config = Config;
exports.outputPath = outputPath;
exports.startPath = startPath;
exports.initialScript = initialScript;
exports.serverRun = serverRun;
exports.watcher = watcher;
exports.exec = exec;
/* outputPath Not a pure module */
