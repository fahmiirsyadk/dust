// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Internal__Dust_Syntax_Compiler$DustSsg from "./Internal__Dust_Syntax_Compiler.mjs";

function text(node) {
  return {
          hd: node,
          tl: /* [] */0
        };
}

function a(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "a", attrs, children);
}

function abbr(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "abbr", attrs, children);
}

function address(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "address", attrs, children);
}

function area(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "area", attrs, children);
}

function article(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "article", attrs, children);
}

function aside(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "aside", attrs, children);
}

function audio(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "audio", attrs, children);
}

function b(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "b", attrs, children);
}

function base(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "base", attrs, children);
}

function bdi(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "bdi", attrs, children);
}

function bdo(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "bdo", attrs, children);
}

function blockquotes(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "blockquotes", attrs, children);
}

function body(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "body", attrs, children);
}

function br(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "br", attrs, children);
}

function button(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "button", attrs, children);
}

function canvas(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "canvas", attrs, children);
}

function caption(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "caption", attrs, children);
}

function cite(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "cite", attrs, children);
}

function code(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "code", attrs, children);
}

function col(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "col", attrs, children);
}

function colgroup(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "colgroup", attrs, children);
}

function command(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "command", attrs, children);
}

function datalist(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "datalist", attrs, children);
}

function dd(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "dd", attrs, children);
}

function del(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "del", attrs, children);
}

function details(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "details", attrs, children);
}

function dfn(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "dfn", attrs, children);
}

function dialog(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "dialog", attrs, children);
}

function div(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "div", attrs, children);
}

function dl(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "dl", attrs, children);
}

function dt(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "dt", attrs, children);
}

function em(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "em", attrs, children);
}

function embed(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "embed", attrs, children);
}

function figcation(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "figcation", attrs, children);
}

function figure(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "figure", attrs, children);
}

function footer(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "footer", attrs, children);
}

function form(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "form", attrs, children);
}

function h1(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "h1", attrs, children);
}

function h2(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "h2", attrs, children);
}

function h3(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "h3", attrs, children);
}

function h4(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "h4", attrs, children);
}

function h5(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "h5", attrs, children);
}

function h6(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "h6", attrs, children);
}

function head(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "head", attrs, children);
}

function header(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "header", attrs, children);
}

function hr(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "hr", attrs, children);
}

function html(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "html", attrs, children);
}

function i(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "i", attrs, children);
}

function iframe(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "iframe", attrs, children);
}

function img(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Single */0, "img", attrs, children);
}

function input(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Single */0, "input", attrs, children);
}

function ins(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "ins", attrs, children);
}

function kbd(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "kbd", attrs, children);
}

function label(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "label", attrs, children);
}

function legend(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "legend", attrs, children);
}

function li(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "li", attrs, children);
}

function link(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Single */0, "link", attrs, children);
}

function main(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "main", attrs, children);
}

function map(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "map", attrs, children);
}

function mark(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "mark", attrs, children);
}

function menu(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "menu", attrs, children);
}

function menuItem(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "menuItem", attrs, children);
}

function meta(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Single */0, "meta", attrs, children);
}

function meter(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "meter", attrs, children);
}

function nav(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "nav", attrs, children);
}

function noscript(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "noscript", attrs, children);
}

function object_(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "object", attrs, children);
}

function ul(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "ul", attrs, children);
}

function ol(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "ol", attrs, children);
}

function optgroup(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "optgroup", attrs, children);
}

function p(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "p", attrs, children);
}

function param(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "param", attrs, children);
}

function pre(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "pre", attrs, children);
}

function q(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "q", attrs, children);
}

function rp(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "rp", attrs, children);
}

function rt(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "rt", attrs, children);
}

function ruby(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "ruby", attrs, children);
}

function samp(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "samp", attrs, children);
}

function script(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "script", attrs, children);
}

function section(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "section", attrs, children);
}

function select(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "select", attrs, children);
}

function small(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "small", attrs, children);
}

function source(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "source", attrs, children);
}

function span(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "span", attrs, children);
}

function strong(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "strong", attrs, children);
}

function style(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "style", attrs, children);
}

function sub(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "sub", attrs, children);
}

function summary(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "summary", attrs, children);
}

function sup(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "sup", attrs, children);
}

function table(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "table", attrs, children);
}

function tbody(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "tbody", attrs, children);
}

function td(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "td", attrs, children);
}

function textarea(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "textarea", attrs, children);
}

function tfoot(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "tfoot", attrs, children);
}

function th(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "th", attrs, children);
}

function thead(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "thead", attrs, children);
}

function time(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "time", attrs, children);
}

function title(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "title", attrs, children);
}

function tr(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "tr", attrs, children);
}

function track(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "track", attrs, children);
}

function u(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "u", attrs, children);
}

function $$var(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "var", attrs, children);
}

function video(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "video", attrs, children);
}

function wbr(attrs, children) {
  return Internal__Dust_Syntax_Compiler$DustSsg.render(/* Paired */1, "wbr", attrs, children);
}

var Elements = {
  text: text,
  a: a,
  abbr: abbr,
  address: address,
  area: area,
  article: article,
  aside: aside,
  audio: audio,
  b: b,
  base: base,
  bdi: bdi,
  bdo: bdo,
  blockquotes: blockquotes,
  body: body,
  br: br,
  button: button,
  canvas: canvas,
  caption: caption,
  cite: cite,
  code: code,
  col: col,
  colgroup: colgroup,
  command: command,
  datalist: datalist,
  dd: dd,
  del: del,
  details: details,
  dfn: dfn,
  dialog: dialog,
  div: div,
  dl: dl,
  dt: dt,
  em: em,
  embed: embed,
  figcation: figcation,
  figure: figure,
  footer: footer,
  form: form,
  h1: h1,
  h2: h2,
  h3: h3,
  h4: h4,
  h5: h5,
  h6: h6,
  head: head,
  header: header,
  hr: hr,
  html: html,
  i: i,
  iframe: iframe,
  img: img,
  input: input,
  ins: ins,
  kbd: kbd,
  label: label,
  legend: legend,
  li: li,
  link: link,
  main: main,
  map: map,
  mark: mark,
  menu: menu,
  menuItem: menuItem,
  meta: meta,
  meter: meter,
  nav: nav,
  noscript: noscript,
  object_: object_,
  ul: ul,
  ol: ol,
  optgroup: optgroup,
  p: p,
  param: param,
  pre: pre,
  q: q,
  rp: rp,
  rt: rt,
  ruby: ruby,
  samp: samp,
  script: script,
  section: section,
  select: select,
  small: small,
  source: source,
  span: span,
  strong: strong,
  style: style,
  sub: sub,
  summary: summary,
  sup: sup,
  table: table,
  tbody: tbody,
  td: td,
  textarea: textarea,
  tfoot: tfoot,
  th: th,
  thead: thead,
  time: time,
  title: title,
  tr: tr,
  track: track,
  u: u,
  $$var: $$var,
  video: video,
  wbr: wbr
};

function accept(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "accept",
              _1: p
            });
}

function acceptCharset(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "accept-charset",
              _1: p
            });
}

function accesskey(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "accesskey",
              _1: p
            });
}

function alt(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "alt",
              _1: p
            });
}

function autofocus(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "autofocus",
              _1: p
            });
}

function action(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "action",
              _1: p
            });
}

function autocomplete(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "autocomplete",
              _1: p
            });
}

function autosave(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "autosave",
              _1: p
            });
}

function async(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "async",
              _1: p
            });
}

function cols(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "cols",
              _1: p
            });
}

function controls(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "controls",
              _1: p
            });
}

function colspan(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "colspan",
              _1: p
            });
}

function charset(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "charset",
              _1: p
            });
}

function charset2(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "charset",
              _1: "utf-8"
            });
}

function content(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "content",
              _1: p
            });
}

function checked(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "checked",
              _1: p
            });
}

function coords(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "coord",
              _1: p
            });
}

function contenteditable(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "contenteditable",
              _1: p
            });
}

function class_(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "class",
              _1: p
            });
}

function cite$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "cite",
              _1: p
            });
}

function data(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "data",
              _1: p
            });
}

function disabled(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "disabled",
              _1: p
            });
}

function datetime(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "datetime",
              _1: p.toString()
            });
}

function $$default(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "default",
              _1: p
            });
}

function defer(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "defer",
              _1: p
            });
}

function dir(p) {
  var toString = p === "Rtl" ? "rtl" : (
      p === "Auto" ? "auto" : "ltr"
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "dir",
              _1: toString
            });
}

function dirname(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "dirname",
              _1: p
            });
}

function download(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "download",
              _1: p
            });
}

function draggable(p) {
  var toString = p === "Auto" ? "auto" : (
      p === "True" ? "true" : "false"
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "draggable",
              _1: toString
            });
}

function enctype(p) {
  var toString = p === "ApplicationXWwwFormUrlEncoded" ? "application/x-www-form-urlencoded" : (
      p === "MultipartFormData" ? "MultipartFormData" : "TextPlain"
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "enctype",
              _1: toString
            });
}

function for_(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "for",
              _1: p
            });
}

function form$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "form",
              _1: p
            });
}

function formaction(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "formaction",
              _1: p
            });
}

function header$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "header",
              _1: p
            });
}

function height(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "height",
              _1: p.toString()
            });
}

function hidden(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "hidden",
              _1: p
            });
}

function high(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "high",
              _1: p.toString()
            });
}

function href(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "href",
              _1: p
            });
}

function hreflang(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "hreflang",
              _1: p
            });
}

function httpEquiv(p) {
  var toString = p === "ContentSecurityPolicy" ? "content-security-policy" : (
      p === "ContentType" ? "content-type" : (
          p === "Refresh" ? "refresh" : "default-style"
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "httpEquiv",
              _1: toString
            });
}

function id(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "id",
              _1: p
            });
}

function ismap(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "ismap",
              _1: p
            });
}

function kind(p) {
  var toString = p === "Caption" ? "captions" : (
      p === "Subtitles" ? "subtitles" : (
          p === "Metadata" ? "metadata" : (
              p === "Descriptions" ? "descriptions" : "chapters"
            )
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "kind",
              _1: toString
            });
}

function label$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "label",
              _1: p
            });
}

function lang(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "lang",
              _1: p
            });
}

function list(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "list",
              _1: p
            });
}

function loop(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "loop",
              _1: p
            });
}

function low(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "low",
              _1: p.toString()
            });
}

function max(p) {
  var toString = p.VAL.toString();
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "max",
              _1: toString
            });
}

function maxlength(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "maxlength",
              _1: p
            });
}

function media(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "media",
              _1: p
            });
}

function method(p) {
  var toString = p === "POST" ? "post" : "get";
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "method",
              _1: toString
            });
}

function min(p) {
  var toString = p.VAL.toString();
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "max",
              _1: toString
            });
}

function multiple(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "multiple",
              _1: p
            });
}

function muted(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "muted",
              _1: p
            });
}

function name(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "name",
              _1: p
            });
}

function name__meta(p) {
  var toString = p === "ApplicationName" ? "application-name" : (
      p === "ThemeColor" ? "theme-color" : (
          p === "Viewport" ? "viewport" : (
              p === "Keyword" ? "keyword" : (
                  p === "Author" ? "author" : (
                      p === "Generator" ? "generator" : "description"
                    )
                )
            )
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "name",
              _1: toString
            });
}

function novalidate(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "novalidate",
              _1: p
            });
}

function onabort(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onabort",
              _1: p
            });
}

function onafterprint(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onafterprint",
              _1: p
            });
}

function onbeforeprint(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onbeforeprint",
              _1: p
            });
}

function onbeforeunload(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onbeforeunload",
              _1: p
            });
}

function onblur(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onblur",
              _1: p
            });
}

function oncanplay(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oncanplay",
              _1: p
            });
}

function oncanplaythrough(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oncanplaythrough",
              _1: p
            });
}

function onclick(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onclick",
              _1: p
            });
}

function onchange(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onchange",
              _1: p
            });
}

function oncontextmenu(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oncontextmenu",
              _1: p
            });
}

function oncopy(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oncopy",
              _1: p
            });
}

function oncut(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oncut",
              _1: p
            });
}

function ondblclick(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondblclick",
              _1: p
            });
}

function ondrag(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondrag",
              _1: p
            });
}

function ondragend(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondragend",
              _1: p
            });
}

function ondragenter(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondragenter",
              _1: p
            });
}

function ondragleave(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondragleave",
              _1: p
            });
}

function ondragstart(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondragstart",
              _1: p
            });
}

function ondrop(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondrop",
              _1: p
            });
}

function ondurationchange(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ondurationchange",
              _1: p
            });
}

function onemptied(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onemptied",
              _1: p
            });
}

function onended(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onended",
              _1: p
            });
}

function onerror(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onerror",
              _1: p
            });
}

function onfocus(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onfocus",
              _1: p
            });
}

function onhaschange(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onhaschange",
              _1: p
            });
}

function oninput(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oninput",
              _1: p
            });
}

function oninvalid(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "oninvalid",
              _1: p
            });
}

function onkeydown(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onkeydown",
              _1: p
            });
}

function onkeypress(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onkeypress",
              _1: p
            });
}

function onkeyup(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onkeyup",
              _1: p
            });
}

function onload(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onload",
              _1: p
            });
}

function onloadeddata(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onloadeddata",
              _1: p
            });
}

function onloadedmetada(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onloadedmetada",
              _1: p
            });
}

function onloadstart(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onloadstart",
              _1: p
            });
}

function onmousedown(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onmousedown",
              _1: p
            });
}

function onmouseout(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onmouseout",
              _1: p
            });
}

function onmouseover(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onmouseover",
              _1: p
            });
}

function onmouseup(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onmouseup",
              _1: p
            });
}

function onmousewheel(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onmousewheel",
              _1: p
            });
}

function onoffline(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onoffline",
              _1: p
            });
}

function ononline(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ononline",
              _1: p
            });
}

function onpagehide(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onpagehide",
              _1: p
            });
}

function onpageshow(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onpageshow",
              _1: p
            });
}

function onpaste(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onpaste",
              _1: p
            });
}

function onpause(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onpause",
              _1: p
            });
}

function onplaying(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onplaying",
              _1: p
            });
}

function onpopstate(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onpopstate",
              _1: p
            });
}

function onprogress(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onprogress",
              _1: p
            });
}

function onratechange(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onratechange",
              _1: p
            });
}

function onreset(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onreset",
              _1: p
            });
}

function onresize(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onresize",
              _1: p
            });
}

function onscroll(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onscroll",
              _1: p
            });
}

function onsearch(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onsearch",
              _1: p
            });
}

function onseeked(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onseeked",
              _1: p
            });
}

function onselect(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onselect",
              _1: p
            });
}

function onstalled(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onstalled",
              _1: p
            });
}

function onstorage(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onstorage",
              _1: p
            });
}

function ontimeupdate(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ontimeupdate",
              _1: p
            });
}

function ontoggle(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "ontoggle",
              _1: p
            });
}

function onunload(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onunload",
              _1: p
            });
}

function onvolumechange(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onvolumechange",
              _1: p
            });
}

function onwaiting(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onwaiting",
              _1: p
            });
}

function onwheel(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "onwheel",
              _1: p
            });
}

function open_(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "open",
              _1: p
            });
}

function optimum(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "optimum",
              _1: p.toString()
            });
}

function placeholder(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "placeholder",
              _1: p
            });
}

function pattern(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "pattern",
              _1: p
            });
}

function poster(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "poster",
              _1: p
            });
}

function preload(p) {
  var toString = p === "Auto" ? "auto" : (
      p === "None" ? "none" : "metadata"
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "preload",
              _1: toString
            });
}

function readonly(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "readonly",
              _1: p
            });
}

function rel__a(p) {
  var toString = p === "Nofollow" ? "nofollow" : (
      p === "Tag" ? "tag" : (
          p === "Bookmark" ? "bookmark" : (
              p === "Noopener" ? "noopener" : (
                  p === "Search" ? "search" : (
                      p === "License" ? "license" : (
                          p === "Author" ? "author" : (
                              p === "Noreferrer" ? "noreferrer" : (
                                  p === "Help" ? "help" : (
                                      p === "Next" ? "next" : (
                                          p === "Prev" ? "prev" : (
                                              p === "External" ? "external" : "alternate"
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "rel",
              _1: toString
            });
}

function rel__form(p) {
  var toString = p === "Noopener" ? "noopener" : (
      p === "Search" ? "search" : (
          p === "License" ? "license" : (
              p === "Noreferrer" ? "noreferrer" : (
                  p === "Help" ? "help" : (
                      p === "Next" ? "next" : (
                          p === "Prev" ? "prev" : (
                              p === "External" ? "external" : "nofollow"
                            )
                        )
                    )
                )
            )
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "rel",
              _1: toString
            });
}

function rel__link(p) {
  var toString = p === "Prerender" ? "prerender" : (
      p === "Alternate" ? "alternate" : (
          p === "Stylesheet" ? "stylesheet" : (
              p === "DnsPrefetch" ? "dns-prefetch" : (
                  p === "Pingback" ? "pingback" : (
                      p === "Preload" ? "preload" : (
                          p === "Search" ? "search" : (
                              p === "License" ? "license" : (
                                  p === "Author" ? "author" : (
                                      p === "Preconnect" ? "preconnect" : (
                                          p === "Help" ? "help" : (
                                              p === "Icon" ? "icon" : (
                                                  p === "Next" ? "next" : (
                                                      p === "Prev" ? "prev" : "prefetch"
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "rel",
              _1: toString
            });
}

function required(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "required",
              _1: p
            });
}

function reversed(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "reversed",
              _1: p
            });
}

function rows(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "rows",
              _1: p
            });
}

function rowspan(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "rowspan",
              _1: p
            });
}

function scope(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "scope",
              _1: p
            });
}

function selected(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "selected",
              _1: p
            });
}

function shape(p) {
  var toString = p === "Circle" ? "circle" : (
      p === "Poly" ? "poly" : (
          p === "Rect" ? "rect" : "default"
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "shape",
              _1: toString
            });
}

function size(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "size",
              _1: p
            });
}

function sizes(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "sizes",
              _1: p
            });
}

function span$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "span",
              _1: p
            });
}

function spellcheck(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrBool */1,
              _0: "spellcheck",
              _1: p
            });
}

function src(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "src",
              _1: p
            });
}

function srcdoc(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "srcdoc",
              _1: p
            });
}

function srclang(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "srclang",
              _1: p
            });
}

function srcset(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "srcset",
              _1: p
            });
}

function start(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "start",
              _1: p
            });
}

function step(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "step",
              _1: p
            });
}

function style$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "style",
              _1: p
            });
}

function tabindex(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrInt */2,
              _0: "tabindex",
              _1: p
            });
}

function title$1(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "title",
              _1: p
            });
}

function type_(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "type",
              _1: p
            });
}

function target(p) {
  var toString = p === "Framename" ? "framename" : (
      p === "Top" ? "_top" : (
          p === "Parent" ? "_parent" : (
              p === "Self" ? "_self" : "_blank"
            )
        )
    );
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "target",
              _1: toString
            });
}

function usemap(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "usemap",
              _1: p
            });
}

function value(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "value",
              _1: p
            });
}

function width(p) {
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "width",
              _1: p.toString()
            });
}

function wrap(p) {
  var toString = p === "Soft" ? "soft" : "hard";
  return Internal__Dust_Syntax_Compiler$DustSsg.attrFormat({
              TAG: /* AttrString */0,
              _0: "wrap",
              _1: toString
            });
}

var Properties = {
  accept: accept,
  acceptCharset: acceptCharset,
  accesskey: accesskey,
  alt: alt,
  autofocus: autofocus,
  action: action,
  autocomplete: autocomplete,
  autosave: autosave,
  async: async,
  cols: cols,
  controls: controls,
  colspan: colspan,
  charset: charset,
  charset2: charset2,
  content: content,
  checked: checked,
  coords: coords,
  contenteditable: contenteditable,
  class_: class_,
  cite: cite$1,
  data: data,
  disabled: disabled,
  datetime: datetime,
  $$default: $$default,
  defer: defer,
  dir: dir,
  dirname: dirname,
  download: download,
  draggable: draggable,
  enctype: enctype,
  for_: for_,
  form: form$1,
  formaction: formaction,
  header: header$1,
  height: height,
  hidden: hidden,
  high: high,
  href: href,
  hreflang: hreflang,
  httpEquiv: httpEquiv,
  id: id,
  ismap: ismap,
  kind: kind,
  label: label$1,
  lang: lang,
  list: list,
  loop: loop,
  low: low,
  max: max,
  maxlength: maxlength,
  media: media,
  method: method,
  min: min,
  multiple: multiple,
  muted: muted,
  name: name,
  name__meta: name__meta,
  novalidate: novalidate,
  onabort: onabort,
  onafterprint: onafterprint,
  onbeforeprint: onbeforeprint,
  onbeforeunload: onbeforeunload,
  onblur: onblur,
  oncanplay: oncanplay,
  oncanplaythrough: oncanplaythrough,
  onclick: onclick,
  onchange: onchange,
  oncontextmenu: oncontextmenu,
  oncopy: oncopy,
  oncut: oncut,
  ondblclick: ondblclick,
  ondrag: ondrag,
  ondragend: ondragend,
  ondragenter: ondragenter,
  ondragleave: ondragleave,
  ondragstart: ondragstart,
  ondrop: ondrop,
  ondurationchange: ondurationchange,
  onemptied: onemptied,
  onended: onended,
  onerror: onerror,
  onfocus: onfocus,
  onhaschange: onhaschange,
  oninput: oninput,
  oninvalid: oninvalid,
  onkeydown: onkeydown,
  onkeypress: onkeypress,
  onkeyup: onkeyup,
  onload: onload,
  onloadeddata: onloadeddata,
  onloadedmetada: onloadedmetada,
  onloadstart: onloadstart,
  onmousedown: onmousedown,
  onmouseout: onmouseout,
  onmouseover: onmouseover,
  onmouseup: onmouseup,
  onmousewheel: onmousewheel,
  onoffline: onoffline,
  ononline: ononline,
  onpagehide: onpagehide,
  onpageshow: onpageshow,
  onpaste: onpaste,
  onpause: onpause,
  onplaying: onplaying,
  onpopstate: onpopstate,
  onprogress: onprogress,
  onratechange: onratechange,
  onreset: onreset,
  onresize: onresize,
  onscroll: onscroll,
  onsearch: onsearch,
  onseeked: onseeked,
  onselect: onselect,
  onstalled: onstalled,
  onstorage: onstorage,
  ontimeupdate: ontimeupdate,
  ontoggle: ontoggle,
  onunload: onunload,
  onvolumechange: onvolumechange,
  onwaiting: onwaiting,
  onwheel: onwheel,
  open_: open_,
  optimum: optimum,
  placeholder: placeholder,
  pattern: pattern,
  poster: poster,
  preload: preload,
  readonly: readonly,
  rel__a: rel__a,
  rel__area: rel__a,
  rel__form: rel__form,
  rel__link: rel__link,
  required: required,
  reversed: reversed,
  rows: rows,
  rowspan: rowspan,
  scope: scope,
  selected: selected,
  shape: shape,
  size: size,
  sizes: sizes,
  span: span$1,
  spellcheck: spellcheck,
  src: src,
  srcdoc: srcdoc,
  srclang: srclang,
  srcset: srcset,
  start: start,
  step: step,
  style: style$1,
  tabindex: tabindex,
  title: title$1,
  type_: type_,
  target: target,
  usemap: usemap,
  value: value,
  width: width,
  wrap: wrap
};

var Html = {
  Elements: Elements,
  Properties: Properties
};

export {
  Html ,
  
}
/* No side effect */
